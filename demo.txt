Quick setup — if you’ve done this kind of thing before
or	
https://github.com/PRASHANTH990/learn_flutterwidgets.git
Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore.

…or create a new repository on the command line
echo "# learn_flutterwidgets" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/PRASHANTH990/learn_flutterwidgets.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/PRASHANTH990/learn_flutterwidgets.git
git branch -M main
git push -u origin main
…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

==============================================================================================================


import 'package:flutter/material.dart';
import 'package:try_widgets_1/drawer.dart';  
  
  
    return Scaffold(
      drawer: const MyDrawer(),
      appBar: AppBar(
        title: const Text('Silver App Bar'),
      ),
      body: Center(
        child: ElevatedButton(
          child: const Text('Alert Dialog'),
          onPressed: () => {},
        ),
      ),
    );




        return Scaffold(
      drawer: const MyDrawer(),
      appBar: AppBar(
        title: const Text('--------------'),
      ),
      body: Center(
        child: ElevatedButton(
          child: const Text('Alert Dialog'),
          onPressed: () => {},
        ),
      ),
    );


------------------Cubit notes---------------------------------------------------------------------------------------------------

Text(
'${BlocProvider.of<CounterCubit>(
context,
listen: true,
).state.counter}',
style: Theme.of(context).textTheme.headlineMedium,
// style: TextStyle(
//   fontSize: double.parse('$_counter'),
// ),
),

                         [OR]

BlocBuilder<CounterCubit, CounterState>(
builder: (context, state) {
  return Text(
    '${state.counter}',
    style: Theme.of(context).textTheme.headlineMedium,
    // style: TextStyle(
    //   fontSize: double.parse('$_counter'),
    // ),
  );
},
),

------------------------------------------------------------------------------------------------------------------
// show a alertbox after count reaches 5 and 
// move to another page when reaches -1
---------------------------------------------------------
-BlocListener--------------------------------------------
---------------------------------------------------------
BlocListener<CounterCubit, CounterState>(
  listener: (context, state) {
    if (state.counter == 3) {
      showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              content: Text('counter is ${state.counter}'),
            );
          });
    } else if (state.counter == -1) {
      Navigator.of(context).pushNamed('stream_Controller');
    }
  },
  child: BlocBuilder<CounterCubit, CounterState>(
    builder: (context, state) {
      return Text(
        '${state.counter}',
        style: Theme.of(context).textTheme.headlineMedium,
        // style: TextStyle(
        //   fontSize: double.parse('$_counter'),
        // ),
      );
    },
  ),
),

---------------------------------------------------------
-BlocConsumer--------------------------------------------
---------------------------------------------------------
BlocConsumer<CounterCubit, CounterState>(
  listener: (context, state) {
    if (state.counter == 3) {
      showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              content: Text('counter is ${state.counter}'),
            );
          });
    } else if (state.counter == -1) {
      Navigator.of(context).pushNamed('stream_Controller');
    }
  },
  builder: (context, state) {
    return Text(
      '${state.counter}',
      style: Theme.of(context).textTheme.headlineMedium,
      // style: TextStyle(
      //   fontSize: double.parse('$_counter'),
      // ),
    );
  },
),




------------------BLoC notes---------------------------------------------------------------------------------------------------

---------------------------------------------------------
-Bloc----------------------------------------------------
---------------------------------------------------------

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

[state]----------------------------------------------------------------
class CounterState extends Equatable {
  final int counter;
  // click bulb here
  // 1.constructor
  // 2.equatable
  // tostring
  // copywith

  CounterState({
    required this.counter,
  });

  factory CounterState.inittial() {
    return CounterState(counter: 0);
  }

  @override
  List<Object> get props => [counter];

  @override
  String toString() => 'CounterState(counter: $counter)';

  CounterState copyWith({
    int? counter,
  }) {
    return CounterState(
      counter: counter ?? this.counter,
    );
  }
}

[events]----------------------------------------------------------------
class CounterEvent extends Equatable {
  const CounterEvent();
  @override
  List<Object?> get props => [];
}

class IncrementCounterEvent extends CounterEvent {}

class DecrementCounterEvent extends CounterEvent {}


[bloc]----------------------------------------------------------------
class CounterBloc extends Bloc<CounterEvent, CounterState> {
  CounterBloc() : super(CounterState.inittial()) {
    on<IncrementCounterEvent>((event, emit) {
      emit(state.copyWith(counter: state.counter + 1));
    });

    on<DecrementCounterEvent>((event, emit) {
      emit(state.copyWith(counter: state.counter - 1));
    });
  }
}


---------------------------------------------------------
-main.dart----------------------------------------------------
---------------------------------------------------------

Widget build(BuildContext context) {
//  return BlocProvider<CounterCubit>(
//  create: (context) => CounterCubit(),
return BlocProvider<CounterBloc>(
  create: (context) => CounterBloc(),
  child: MaterialApp(
    debugShowCheckedModeBanner: false,
    title: 'Flutter Demo',
    theme: ThemeData(
      colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
      useMaterial3: true,
    ),

--------------------------------------------------------------------------
-Bloc_Counter_try.dart----------------------------------------------------
--------------------------------------------------------------------------

Scaffold(
  appBar: AppBar(
    backgroundColor: Theme.of(context).colorScheme.inversePrimary,
    title: Text(widget.title),
  ),
  body: BlocListener<CounterBloc, CounterState>(
    listener: (context, state) {
      if (state.counter == 3) {
        showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                content: Text('counter is ${state.counter}'),
              );
            });
      } else if (state.counter == -1) {
        Navigator.of(context).pushNamed('stream_Controller');
      }
    },
    child: Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Text(
            'You have pushed the button this many times:',
            style: Theme.of(context).textTheme.labelSmall,
          ),
          Text(
            '${context.watch<CounterBloc>().state.counter}',
            style: Theme.of(context).textTheme.headlineMedium,
          ),
        ],
      ),
    ),
  ),
  floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
  floatingActionButton: Row(
    crossAxisAlignment: CrossAxisAlignment.center,
    mainAxisAlignment: MainAxisAlignment.spaceAround,
    children: [
      FloatingActionButton(
        onPressed: () {
          BlocProvider.of<CounterBloc>(context)
              .add(DecrementCounterEvent());
          //  context.read()<CounterBloc>().add(DecrementCounterEvent());
        },
        tooltip: 'Decrement',
        child: const Icon(
          Icons.remove,
        ),
      ),
      FloatingActionButton(
        onPressed: () {
          //           BlocProvider.of<CounterBloc>(context)
          // .add(IncrementCounterEvent());
          context.read()<CounterBloc>().add(IncrementCounterEvent());
        },
        tooltip: 'Increment',
        child: const Icon(
          Icons.add,
        ),
      ),
    ],
  ), // This trailing comma makes auto-formatting nicer for build methods.
);


